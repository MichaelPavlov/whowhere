# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-05 09:50
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название города')),
                ('timezone_string', models.CharField(default='Europe/Moscow', max_length=50)),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=75, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('status', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, max_length=25, null=True, verbose_name='Телефон')),
                ('price', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True, verbose_name='Цена')),
                ('participants', models.IntegerField(default=0, verbose_name='Участники')),
                ('price_unknown', models.BooleanField(default=False, verbose_name='Цена неопроеделена')),
                ('is_free', models.BooleanField(default=False, verbose_name='Бесплатное событие')),
                ('time_unknown', models.BooleanField(default=False, verbose_name='Время неопределено')),
                ('time_all', models.BooleanField(default=False, verbose_name='Круглосуточно каждый день')),
                ('schedule', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('dates', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ranges.DateRangeField(), blank=True, null=True, size=None)),
                ('days', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), blank=True, null=True, size=None)),
                ('public', models.BooleanField(default=True)),
                ('is_recurring', models.BooleanField(default=False, verbose_name='Повторяющееся событие')),
                ('views', models.IntegerField(blank=True, default=0, null=True, verbose_name='Просмотры')),
                ('rating', models.IntegerField(blank=True, default=5, null=True, verbose_name='Рейтинг')),
                ('website', models.CharField(blank=True, max_length=255, null=True, verbose_name='Сайт')),
                ('image_source', models.CharField(blank=True, max_length=255, null=True, verbose_name='Источник фото')),
                ('link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка')),
                ('misc', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('min_age', models.IntegerField(blank=True, null=True, verbose_name='Минимальный возраст')),
            ],
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
            ],
            options={
                'verbose_name': 'Категория событий',
                'verbose_name_plural': 'Категории событий',
            },
        ),
        migrations.CreateModel(
            name='EventSubcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventCategory')),
            ],
            options={
                'verbose_name': 'Подкатегория событий',
                'verbose_name_plural': 'Подкатегории событиый',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=75, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('misc', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images', verbose_name='Картинка')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на источник фотографий')),
                ('buy_link', models.TextField(blank=True, null=True, verbose_name='Ссылка на покупку билета')),
                ('price', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ('price_unknown', models.BooleanField(default=False, verbose_name='Цена неопределена')),
                ('time_unknown', models.BooleanField(default=False, verbose_name='Время неопределено')),
                ('views', models.IntegerField(blank=True, default=0, null=True)),
                ('visitors_count', models.IntegerField(default=0)),
                ('rating', models.IntegerField(blank=True, default=0, null=True)),
                ('phone', models.CharField(blank=True, max_length=16, null=True)),
                ('website', models.CharField(blank=True, max_length=254, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='PlaceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория мест',
                'verbose_name_plural': 'Категории мест',
            },
        ),
        migrations.CreateModel(
            name='PlaceSubcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, verbose_name='Название подкатегории')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PlaceCategory')),
            ],
            options={
                'verbose_name': 'Подкатегория мест',
                'verbose_name_plural': 'Подкатегории мест',
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.City')),
            ],
            options={
                'verbose_name': 'Станция метро',
                'verbose_name_plural': 'Станции метро',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='tag_images')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='tag_images')),
            ],
        ),
        migrations.AddField(
            model_name='tag',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.TagCategory'),
        ),
        migrations.AddField(
            model_name='place',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PlaceCategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='place',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.City', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='place',
            name='favorited_by',
            field=models.ManyToManyField(blank=True, null=True, related_name='favorite_places', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='place',
            name='station',
            field=smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='city', chained_model_field='city', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Station', verbose_name='Станции метро'),
        ),
        migrations.AddField(
            model_name='place',
            name='subcats',
            field=smart_selects.db_fields.ChainedManyToManyField(blank=True, chained_field='category', chained_model_field='category', to='core.PlaceSubcategory', verbose_name='Подкатегории'),
        ),
        migrations.AddField(
            model_name='place',
            name='wished_by',
            field=models.ManyToManyField(blank=True, null=True, related_name='wishlist_places', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='categories',
            field=models.ManyToManyField(blank=True, to='core.EventSubcategory'),
        ),
        migrations.AddField(
            model_name='event',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.City', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='event',
            name='favorited_by',
            field=models.ManyToManyField(blank=True, null=True, related_name='favorite_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Place', verbose_name='Место'),
        ),
        migrations.AddField(
            model_name='event',
            name='station',
            field=smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='city', chained_model_field='city', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Station', verbose_name='Станции метро'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.Tag'),
        ),
        migrations.AddField(
            model_name='event',
            name='wished_by',
            field=models.ManyToManyField(blank=True, null=True, related_name='wishlist_events', to=settings.AUTH_USER_MODEL),
        ),
    ]
